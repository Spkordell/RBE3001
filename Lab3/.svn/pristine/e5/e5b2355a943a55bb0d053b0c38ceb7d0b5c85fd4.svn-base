/*
 * accelerometer.c
 *
 *  Created on: Feb 12, 2014
 *      Author: Steven Kordell
 */


#include "main.h"

Accel accel;


//Useful documentation
//https://my.wpi.edu/bbcswebdav/pid-276133-dt-content-rid-1385566_1/courses/RBE3001-C14-MASTER/accelerometer_module_schematic%282%29.pdf
//http://ww1.microchip.com/downloads/en/DeviceDoc/21298c.pdf
//https://my.wpi.edu/bbcswebdav/pid-276133-dt-content-rid-1385573_1/courses/RBE3001-C14-MASTER/HitachiH48C3AxisAccelerometer.pdf
void initAccelerometer() {
	accel.newDataAvailable = 0;
	//Initialize SPI
	GenericSPIInit();

	//TODO: Double Check port and pin for SS

	//Set SS to output
	DDRC |=  (1 << ACCEL_SS);
	//set SS high
	PORTC |= (1 << ACCEL_SS);

	//Read VREF register
	accel.vref;
	PORTC &= ~(1 << ACCEL_SS);
	accel.vref = (SPITransceive(OP_START|OP_SINGLE_ENDED|OP_VREF) << 5);
	accel.vref |= SPITransceive(OP_READ);
	PORTC |= (1 << ACCEL_SS);

	//Set timer to sample at 500 hz
	accel.timerMaxCount = (F_CPU/(192*64))*((float)1/500); // = 3 for CTC = 192, prescale = 64, and frequency = 500
	accel.timerCurrentCount = 0;
	InitTimer(0,CTC,192);
	//adjust the prescaler to F_CPU/64 to reduce the number of interrupts
	TCCR0Bbits._CS02 = 0;
	TCCR0Bbits._CS01 = 1;
	TCCR0Bbits._CS00 = 1;
}

//Reads 12-bit data from the H48C accelerometer module.
uint16_t GetAccelerationH48C(char axis) {
	//todo double check port
	if (axis == 'x') {
		axis = OP_XAXIS;
	} else if (axis == 'y') {
		axis = OP_YAXIS;
	} else if (axis == 'z') {
		axis = OP_ZAXIS;
	} else if (axis == 'v') {
		axis = OP_VREF;
	} else {
		return 0;
	}
	uint16_t result;
	PORTC &= ~(1 << ACCEL_SS);
	result = (SPITransceive(OP_START|OP_SINGLE_ENDED|axis) << 5);
	result |= SPITransceive(OP_READ);
	PORTC |= (1 << ACCEL_SS);
	return result;
}

ISR(TIMER0_COMPA_vect) {
	if(accel.timerCurrentCount >= accel.timerMaxCount) {
		accel.timerCurrentCount = 0;
		//read in each axis and save the data
		accel.x = GetAccelerationH48C('x');
		accel.y = GetAccelerationH48C('y');
		accel.z = GetAccelerationH48C('z');
		accel.vref = GetAccelerationH48C('v');
		//Set a flag to alert that new Data is available
		accel.newDataAvailable = 1;
	} else {
		accel.timerCurrentCount++;
	}
}
