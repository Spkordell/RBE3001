/*
 * main.c
 *
 *  Created on: Jan 19, 2014
 *      Author: Steven Kordell, Cody Wall-Epstein, Jiaqi ren
 *
 */

#include "main.h"

//ADC input channels
#define CURRENT_SENSE_0_ADC 0
#define CURRENT_SENSE_1_ADC 1
#define ARM_LOW_LINK_POT 2
#define ARM_HIGH_LINK_POT 3
#define KP_POT 4
#define KD_POT 5
#define KI_POT

#define POTANGLE 300

//Function prototypes
void printArmData(unsigned short ADCValue);

//Program operation modes
#define CODY_NAME_YOUR_MODE 4
#define DAC_DEMO_MODE 5
#define DRIVE_ARM_MODE 6 //Probably don't actually need this mode. It was just for testing. Delete it later.
#define PID_MODE 8

//current operation mode
#define MODE DAC_DEMO_MODE

//Create struct to store global variables (some ISR require global variables)
Globals globals;

int main() {
	initGlobals();	//Initialize globals
	DebugUSARTInit(DEFAULT_BAUD); //initialize USART

#if MODE == CODY_NAME_YOUR_MODE
	initFreeRunADC(CURRENT_SENSE_0); //InitializeADC for auto-conversion
	//wait for start command from computer
	println("Press \"s\" to start collecting data."); println("");
	while (USART_Receive() != 's');
	while(1) {
		printArmData(globals.ADCValue);
	}
#endif

#if MODE == DAC_DEMO_MODE
	initDAC();
	int DAC0Value = 0;
	int DAC1Value = 4095;
	signed char DAC0State = 1;
	signed char DAC1State = -1;
	while(1) {
		setDAC(0,DAC0Value);
		setDAC(1,DAC1Value);
		if(DAC0Value >= 4095) {
			DAC0State = -1;
		}
		if(DAC1Value >= 4095) {
			DAC1State = -1;
		}
		if(DAC0Value <= 0) {
			DAC0State = 1;
		}
		if(DAC1Value <= 0) {
			DAC1State = 1;
		}
		DAC0Value+=DAC0State;
		DAC1Value+=DAC1State;
	}
#endif

#if MODE == DRIVE_ARM_MODE
	initDAC();
	while(1) {
		driveLink(0,1000);
		driveLink(1,-1000);
		for (long i=0; i<2000000;i++) {
			asm("nop");
		}
		driveLink(0,-1000);
		driveLink(1,1000);
		for (long i=0; i<2000000;i++) {
			asm("nop");
		}
	}
#endif

#if MODE == PID_MODE
	initDAC();

	InitADC();
//init timer

#endif

	return 0;

}


/*
 * Prints the Orientation of potentiometer in ADC counts, pot output in millivolts, and arm orientation in degrees.
 */
void printArmData(unsigned short ADCValue) {
	p_ul(globals.ADCValue);
	print(",");
	p_ul((globals.ADCValue*((float)5/1023))*1000);
	print(",");
	p_ul(globals.ADCValue*((float)POTANGLE/1023));
	println("");
}
