/*
 * main.h
 *
 *  Created on: Feb 19, 2014
 *      Author: Steven Kordell
 */

#ifndef MAIN_H_
#define MAIN_H_

//Dependencies
#include "DAC.h"
#include "PID.h"
#include <avr/io.h>
#include <math.h>
#include "RBELib/RBELib.h"
#include "globals.h"
#include "autoADC.h"
#include "encoder.h"
#include "kinematics.h"
#include "armActuator.h"
#include "currentSensor.h"

//Constants
#define MOTOR_VOLTAGE 12

//ADC Input Channels

#define CURRENT_SENSE_0_ADC 0
#define CURRENT_SENSE_1_ADC 1
#define ARM_LOW_LINK_POT 2
#define ARM_HIGH_LINK_POT 3
#define BLOCK_SENSE_IR 4
#define TRIGGER_IR 5

//Servo Channels
#define CONVEYER_SERVO 0
#define GRIPPER_SERVO 1

//special arm configurations
#define HIGH_LINK_DEFAULT_ANGLE -82.5
#define LOW_LINK_DEFAULT_ANGLE 46.5
#define DEFAULT_X_POSITION 170
#define DEFUALT_Y_POSITION 30
#define HEIGHT_ABOVE_BLOCK 3 //cm

//Time offsets (seconds)
#define BLOCK_TRAVEL_TIME 0.01
#define GRIPPER_CLOSE_TIME 1 //TODO: change prescaler so these values can be higher
#define ARM_LIFT_TIME 1

//miscellaneous constants
#define MIN_BLOCK_DETECTION_THRESHOLD 250
#define IR_POSITION_OFFSET 4 //cm, distance IR is from the arm
#define HEAVY_WEIGHT_THRESHOLD 1

//Program Modes
#define IR_DATA_COLLECT_MODE 0
#define SERVO_TEST_MODE 1
#define PRINT_FK_MODE 2
#define CURRENT_SENSE_MODE 3
#define FINAL_PROJECT_MODE 4

#define MODE 4

//Create enum to store states of state machine
typedef enum {
   INITIALIZE,
   READY_ARM,
   WAIT_FOR_BLOCK1,
   WAIT_FOR_BLOCK2,
   PREP_FOR_PICKUP,
   WAIT_FOR_RISING_TRIGGER,
   WAIT_FOR_FALLING_TRIGGER,
   MOVE_TO_PICKUP,
   GRAB_BLOCK,
   PICKUP_BLOCK,
   DETERMINE_WEIGHT,
   MOVE_TO_SORT
} TASKSTATE;

//create enum for block weights
typedef enum {
	HEAVY,
	LIGHT
} BLOCK_WEIGHT;

///////////////////function prototypes///////////////////

////State machine control Functions
void engageState(TASKSTATE currentState);
TASKSTATE updateState(TASKSTATE currentState);
void printState(TASKSTATE currentState);

////State Specific functions
void initialize();

////Additional Helper functions
void startConveyer();
void openGripper();
void closeGripper();
float IRDistance(uint16_t IRValue);
void setStateDelayTimer(float period);
void stopStateDelayTimer();

#endif /* MAIN_H_ */
