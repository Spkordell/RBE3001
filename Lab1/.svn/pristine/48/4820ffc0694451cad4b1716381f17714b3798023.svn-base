/*
 * timer.c
 *
 *  Created on: Jan 22, 2014
 *      Author: Steven Kordell
 */

#include "main.h"

#define FASTPWM 2

void InitTimer(unsigned char number, unsigned char mode, unsigned short int comp) {
	//disable global interrupts while we set up the timer
	cli();

	switch(number) {
	case 0:
		//Initialize timer to 0
		TCNT0 = 0;
		//disable prescaler
		TCCR0Bbits._CS02 = 0;
		TCCR0Bbits._CS01 = 0;
		TCCR0Bbits._CS00 = 1;
		//enable Timer overflow interrupt:
		TIMSK0bits._TOIE0 = 1;
		//Enable Timer interrupt flag
		TIFR0bits._TOV0 = 1;
		break;
	case 1:
		//Initialize timer to 0
		TCNT1 = 0;
		//disable prescaler
		TCCR1Bbits._CS12 = 0;
		TCCR1Bbits._CS11 = 0;
		TCCR1Bbits._CS10 = 1;
		//enable Timer overflow interrupt:
		TIMSK1bits._TOIE1 = 1;
		//Enable Timer interrupt flag
		TIFR1bits._TOV1 = 1;
		break;
	case 2:
		//Initialize timer to 0
		TCNT2 = 0;
		//disable prescaler
		TCCR2Bbits._CS22 = 0;
		TCCR2Bbits._CS21 = 0;
		TCCR2Bbits._CS20 = 1;
		//enable Timer overflow interrupt:
		TIMSK2bits._TOIE2 = 1;
		//Enable Timer interrupt flag
		TIFR2bits._TOV2 = 1;
		break;
	}
	if (mode == CTC) {
		//Enable CTC mode
		switch(number) {
		case 0:
			//Set mode to CTC
			TCCR0Abits._WGM00 = 0;
			TCCR0Abits._WGM01 = 1;
			TCCR0Bbits._WGM02 = 0;
			OCR0A = comp; //Set comparison value
			//Enable timer interrupts for CTC mode
			TIMSK0bits._OCIE0A = 1;
			//Clear timer compare match flag
			TIFR0bits._OCF0A = 1;
			break;
		case 1:
			//Set mode to CTC
			TCCR1Abits._WGM10 = 0;
			TCCR1Abits._WGM11 = 0;
			TCCR1Bbits._WGM12 = 1;
			TCCR1Bbits._WGM13 = 0;
			OCR1A = comp; //Set comparison value
			//Enable timer interrupts for CTC mode
			TIMSK1bits._OCIE1A = 1;
			//Clear timer compare match flag
			TIFR1bits._OCF1A = 1;
			break;
		case 2:
			//Set mode to CTC
			TCCR2Abits._WGM20 = 0;
			TCCR2Abits._WGM21 = 1;
			TCCR2Bbits._WGM22 = 0;
			OCR2A = comp; //Set comparison value
			//Enable timer interrupts for CTC mode
			TIMSK2bits._OCIE2A = 1;
			//Clear timer compare match flag
			TIFR2bits._OCF2A = 1;
			break;
		}
	}

	/* Implementation incomplete
	 *
	 * Set ICRn and OCRnA
	 *
	 *set prescaler at end  timer1SetPrescaler( TIMER_CLK_DIV8 );
	 *
	 *
	 *
	 *
	 *
	 *Try something like this?
	 *
	 *        sbi(DDRB,PB1);                  //digital output
	 *        sbi(DDRB,PB2);                  // digital output
        sbi(DDRB,PB5);                  // digital output
        sbi(DDRD,PD7);                  // digital output

        sbi (UCSRB, RXCIE);
        sei();

       TCCR1A = 0;
        TCCR1B = 0;
        TCNT1 = 0;
        ICR1 = 0x7000;
        OCR1A = 0x6000;
        OCR1B = 0x3000;

        sbi(TCCR1A,COM1A1);     // set OC1 on at COMP
        sbi(TCCR1A,COM1A0);     // reset OC1 at TOP
        sbi(TCCR1A,COM1B1);     // set OC2 on at COMP
        sbi(TCCR1A,COM1B0);     // reset OC2 at TOP

        // mode 14: (PWM on OC1A and OC1B)
        //   OCR1A defines COMP for PB1 (OC1A)
        //   OCR1B defines COMP for PB2 (OC1B)
        //   ICR1 defines TOP for both lines
        //
        // mode 15: (PWM on OC1B only)
        //    OCR1B defines COMP
        //    OCR1A defines TOP
        //
        cbi(TCCR1A,WGM10);      //  -
        sbi(TCCR1A,WGM11);      //  - Fast PWM
        sbi(TCCR1B,WGM12);      //  - Fast PWM
        sbi(TCCR1B,WGM13);      //  -

        timer1SetPrescaler( TIMER_CLK_DIV8 );   // prescaler
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	if(mode == FASTPWM) {
		switch(number) {
		case 0:
			//Set mode to FASTPWM
			TCCR0Abits._WGM00 = 1;
			TCCR0Abits._WGM01 = 1;
			TCCR0Bbits._WGM02 = 1;
			//Set direction of output pin
			DDRBbits._P3 = OUTPUT;
			//Set non-inverting mode
			TCCR0Abits._COM0A1 = 1;
			TCCR0Abits._COM0A0 = 0;
			OCR0A = comp;  //Set comparison value (duty)
			//Enable timer interrupts for compare register
			TIMSK0bits._OCIE0A = 1;
			//Clear timer compare match flag
			TIFR0bits._OCF0A = 1;
			break;
		case 1:
			//Set mode to FASTPWM
			TCCR1Abits._WGM10 = 1;
			TCCR1Abits._WGM11 = 1;
			TCCR1Bbits._WGM12 = 1;
			TCCR1Bbits._WGM13 = 1;
			//Set non-inverting mode
			TCCR1Abits._COM1A1 = 1;
			TCCR1Abits._COM1A0 = 0;
			OCR1A = comp;  //Set comparison value  (duty)
			break;
		case 2:
			//Set mode to FASTPWM
			TCCR2Abits._WGM20 = 1;
			TCCR2Abits._WGM21 = 1;
			TCCR2Bbits._WGM22 = 1;
			//Set non-inverting mode
			TCCR2Abits._COM2A1 = 1;
			TCCR2Abits._COM2A0 = 0;
			OCR2A = comp; //Set comparison value  (duty)
			break;
		}
	}*/
    //enable global interrupts
    sei();
}

void setCompValue(unsigned char number, unsigned short int comp) {
	switch(number) {
	case 0:
		OCR0A = comp; //Set comparison value
		break;
	case 1:
		OCR1A = comp; //Set comparison value
		break;
	case 2:
		OCR2A = comp; //Set comparison value
		break;
	}
}
