/*
 * main.c
 *
 *  Created on: Jan 19, 2014
 *      Author: Steven Kordell
 */

#include "main.h"

//function prototypes
void printTimeData(unsigned short ADCValue);
void printPWMData();

//Program constants
#define POTCHAN 4 //define channel the potentiometer is connected to
#define POTANGLE 300 //degrees

//Modes (for different lab parts)
#define DATACOLLECTMODE 2
#define PWMMODE 3
#define SAMPLEADCMODE 5

//The mode to use
#define MODE SAMPLEADCMODE
Globals globals; //Create struct to store global variables

int main() {
	initGlobals();	//Initialize globals
	DebugUSARTInit(DEFAULT_BAUD); //initialize USART


#if MODE == PWMMODE
	initFreeRunADC(POTCHAN); //InitializeADC for auto-conversion
	initPWM('B',3,100,.50,576);
	configureButtonInterrupts(); //Configure the buttons for interrupts
	while(1) {
		setPWMDuty((float)globals.ADCValue/1023);
		printPWMData();
	}
#endif
#if MODE == DATACOLLECTMODE
	initFreeRunADC(POTCHAN); //InitializeADC for auto-conversion
	//wait for start command from computer
	println("Press \"s\" to start collecting data."); println("");
	while (USART_Receive() != 's');
	initTimeStamp();
	while(1) {
		printTimeData(globals.ADCValue);
	}
#endif
#if MODE == SAMPLEADCMODE
	InitADC(POTCHAN);

	//Some additional ADC setup
	//Initialize ADC interrupts
	ADCSRAbits._ADIE = 1;
	//Set ADC channel
	ADMUX &= 0b11100000;
	ADMUX |= POTCHAN;

	//configure a button
	DDRDbits._P7 = INPUT;

	while(1) {
		println("Press button 7 to begin sampling ADC 4");
		//wait for the button to be pressed before starting
		while(PINDbits._P7);
		while(!PINDbits._P7);

		//reset all global variables to prepare to sample again
		initGlobals();



		//Start the sampling (ADC conversion is initialized by the timer ISR and captured in the ADC ISR)
		initPWM('B',3,225,.5,320);

		//calculate in advance the number of seconds that occurs between each timer interrupt
		float secondsPerCycle =  (float)globals.PWMCompare/F_CPU;

		//transmit data as it becomes available
		while(globals.latchedCycles*secondsPerCycle < 1) {
			if (globals.sampleDataAvailable) {
				//print time stamp
				println("");
				printfDEBUG_FL(globals.latchedCycles*secondsPerCycle);
				print(",");
				//print the ADC reading
				p_ul(globals.ADCValue);
				globals.sampleDataAvailable = 0;
			}
		}

		println("Sampling Complete");
<<<<<<< .mine

		//reset all global variables to prepare to sample again
		initGlobals();
=======
>>>>>>> .r36
	}
#endif

	return 0;
}

ISR(PCINT3_vect) {
	if(PINDbits._P7 == 0) {
		setPWMFrequency(100);
	}
	if(PINDbits._P6 == 0) {
		setPWMFrequency(20);
	}
	if(PINDbits._P5 == 0) {
		setPWMFrequency(1);
	}
	if(PINDbits._P4 == 0) {
		setPWMFrequency(.5);
	}
}

void printPWMData() {
	//Prints the duty cycle, frequency, state, and pot value to the serial port.
	printfDEBUG_FL(globals.PWMDuty*100);
	print(",");
	printfDEBUG_FL(globals.PWMFrequency);
	print(",");
	if (PINBbits._P3) {
		print("HIGH");
	} else {
		print ("LOW");
	}
	print(",");
	p_ul(globals.ADCValue);
	println("");
}


 // Transmits formated pot values over serial
void printTimeData(unsigned short ADCValue) {
	p_ul(globals.Hour);
	print(":");
	p_ul(globals.Minute);
	print(":");
	p_ul(globals.Second);

	print(",");
	p_ul(globals.ADCValue);
	print(",");
	p_ul((globals.ADCValue*((float)5/1023))*1000);
	print(",");
	p_ul(globals.ADCValue*((float)POTANGLE/1023));
	println("");
}
